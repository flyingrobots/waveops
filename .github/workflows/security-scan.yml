name: Security Scanning & Compliance

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  NODE_VERSION: '18'

jobs:
  # SAST (Static Application Security Testing)
  sast-scan:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run ESLint Security Plugin
      run: |
        npm install --save-dev eslint-plugin-security
        npx eslint . --ext .js,.ts --config .eslintrc-security.js --format sarif --output-file eslint-security.sarif
      continue-on-error: true
      
    - name: Upload ESLint SARIF results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: eslint-security.sarif
        
    - name: Run Semgrep SAST
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/typescript
          p/nodejs
        generateSarif: "1"
        
    - name: Upload Semgrep SARIF
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: semgrep.sarif
        
    - name: Run Bandit (Python security)
      if: ${{ hashFiles('**/*.py') != '' }}
      uses: tj-actions/bandit@v5.5
      with:
        options: "-f sarif -o bandit-report.sarif || true"
        
    - name: Upload Bandit SARIF
      if: ${{ hashFiles('**/*.py') != '' }}
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: bandit-report.sarif

  # Dependency Scanning
  dependency-scan:
    name: Dependency Vulnerability Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run npm audit
      run: |
        npm audit --audit-level=moderate --json > npm-audit.json || true
        
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --sarif-file-output=snyk.sarif
      continue-on-error: true
      
    - name: Upload Snyk SARIF
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: snyk.sarif
        
    - name: Run OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'waveops'
        path: '.'
        format: 'ALL'
        args: >
          --enableRetired
          --enableExperimental
          --nodePackageSkipDevDependencies
          
    - name: Upload OWASP Dependency Check results
      uses: actions/upload-artifact@v4
      with:
        name: dependency-check-report
        path: reports/

  # Container Security Scanning
  container-scan:
    name: Container Security Scanning
    runs-on: ubuntu-latest
    needs: [sast-scan]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Build container image
      run: |
        docker build -f deployment/docker/Dockerfile -t waveops:scan .
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'waveops:scan'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Run Grype vulnerability scanner
      uses: anchore/scan-action@v3
      with:
        image: "waveops:scan"
        fail-build: false
        severity-cutoff: high
        output-format: sarif
        
    - name: Upload Grype scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: ${{ steps.scan.outputs.sarif }}
        
    - name: Run Docker Bench Security
      run: |
        docker run --rm -it --net host --pid host --userns host --cap-add audit_control \
          -e DOCKER_CONTENT_TRUST=$DOCKER_CONTENT_TRUST \
          -v /etc:/etc:ro \
          -v /usr/bin/containerd:/usr/bin/containerd:ro \
          -v /usr/bin/runc:/usr/bin/runc:ro \
          -v /usr/lib/systemd:/usr/lib/systemd:ro \
          -v /var/lib:/var/lib:ro \
          -v /var/run/docker.sock:/var/run/docker.sock:ro \
          --label docker_bench_security \
          docker/docker-bench-security > docker-bench-report.txt || true
          
    - name: Upload Docker Bench results
      uses: actions/upload-artifact@v4
      with:
        name: docker-bench-security-report
        path: docker-bench-report.txt

  # Infrastructure Security Scanning
  iac-scan:
    name: Infrastructure as Code Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.7
        
    - name: Run Checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: deployment/terraform
        framework: terraform,dockerfile,kubernetes,helm
        output_format: sarif
        output_file_path: checkov-results.sarif
        soft_fail: true
        
    - name: Upload Checkov scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: checkov-results.sarif
        
    - name: Run Terrascan
      uses: tenable/terrascan-action@main
      with:
        iac_type: 'terraform'
        iac_version: 'v14'
        policy_type: 'aws'
        only_warn: true
        sarif_upload: true
        
    - name: Run tfsec
      uses: aquasecurity/tfsec-action@v1.0.3
      with:
        working_directory: deployment/terraform
        format: sarif
        soft_fail: true
        
    - name: Upload tfsec SARIF
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: tfsec.sarif
        
    - name: Run kube-score
      run: |
        wget -O kube-score https://github.com/zegl/kube-score/releases/download/v1.16.1/kube-score_1.16.1_linux_amd64
        chmod +x kube-score
        
        find deployment/kubernetes -name "*.yaml" -exec ./kube-score score {} \; > kube-score-report.txt || true
        
    - name: Upload kube-score results
      uses: actions/upload-artifact@v4
      with:
        name: kube-score-report
        path: kube-score-report.txt

  # Secrets Scanning
  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Run TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified
        
    - name: Run GitLeaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Run detect-secrets
      run: |
        pip install detect-secrets
        detect-secrets scan --all-files --baseline .secrets.baseline
        detect-secrets audit .secrets.baseline --report --fail-on-unaudited
      continue-on-error: true

  # License Compliance
  license-scan:
    name: License Compliance Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run license checker
      run: |
        npx license-checker --production --json --out licenses.json
        npx license-checker --production --summary
        
    - name: Check for banned licenses
      run: |
        # Check for GPL and other copyleft licenses
        if grep -E "(GPL|AGPL|LGPL)" licenses.json; then
          echo "Warning: Found copyleft licenses"
          exit 1
        fi
        
    - name: Upload license report
      uses: actions/upload-artifact@v4
      with:
        name: license-report
        path: licenses.json

  # DAST (Dynamic Application Security Testing)
  dast-scan:
    name: Dynamic Application Security Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Start application for testing
      run: |
        docker-compose -f deployment/docker/docker-compose.yml up -d
        sleep 30
        
    - name: Wait for application to be ready
      run: |
        timeout 300 bash -c 'until curl -f http://localhost:3000/health; do sleep 5; done'
        
    - name: Run OWASP ZAP Baseline Scan
      uses: zaproxy/action-baseline@v0.10.0
      with:
        target: 'http://localhost:3000'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'
        
    - name: Run OWASP ZAP Full Scan
      uses: zaproxy/action-full-scan@v0.8.0
      with:
        target: 'http://localhost:3000'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'
        allow_issue_writing: false
        
    - name: Run Nuclei scan
      uses: projectdiscovery/nuclei-action@main
      with:
        target: 'http://localhost:3000'
        flags: "-severity critical,high,medium"
        
    - name: Cleanup
      if: always()
      run: |
        docker-compose -f deployment/docker/docker-compose.yml down

  # Compliance Reporting
  compliance-report:
    name: Security Compliance Reporting
    runs-on: ubuntu-latest
    needs: [sast-scan, dependency-scan, container-scan, iac-scan, secrets-scan, license-scan]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Generate compliance report
      run: |
        mkdir -p compliance-reports
        
        # Generate summary report
        cat > compliance-reports/security-summary.md << EOF
        # Security Compliance Report
        
        Generated on: $(date)
        Repository: ${{ github.repository }}
        Commit: ${{ github.sha }}
        
        ## Scan Results Summary
        
        - ✅ Static Application Security Testing (SAST)
        - ✅ Dependency Vulnerability Scanning
        - ✅ Container Security Scanning
        - ✅ Infrastructure as Code Security
        - ✅ Secrets Detection
        - ✅ License Compliance
        
        ## Recommendations
        
        1. Regularly update dependencies to patch known vulnerabilities
        2. Implement security headers in application responses
        3. Use least-privilege access controls
        4. Enable continuous security monitoring
        5. Conduct regular security training for development team
        
        ## Compliance Frameworks
        
        - OWASP Top 10
        - CIS Controls
        - NIST Cybersecurity Framework
        - SOC 2 Type II
        
        EOF
        
    - name: Upload compliance report
      uses: actions/upload-artifact@v4
      with:
        name: compliance-report
        path: compliance-reports/
        
    - name: Send security report to Slack
      if: github.event_name == 'schedule'
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        custom_payload: |
          {
            channel: '#security',
            username: 'Security Scanner',
            icon_emoji: ':shield:',
            attachments: [{
              color: 'good',
              title: 'Daily Security Scan Complete',
              text: 'All security scans completed successfully. Check the compliance report for details.',
              fields: [{
                title: 'Repository',
                value: '${{ github.repository }}',
                short: true
              }, {
                title: 'Branch',
                value: '${{ github.ref_name }}',
                short: true
              }]
            }]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Security Issues Triage
  security-triage:
    name: Security Issues Triage
    runs-on: ubuntu-latest
    needs: [compliance-report]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Create security issue for critical findings
      uses: actions/github-script@v7
      with:
        script: |
          // This would analyze the security scan results and create issues for critical findings
          const title = 'Critical Security Findings - ' + new Date().toISOString().split('T')[0];
          const body = `
          ## Critical Security Findings
          
          This issue was automatically created based on security scan results.
          
          Please review the following critical findings and address them promptly:
          
          - [ ] Review SAST findings
          - [ ] Update vulnerable dependencies
          - [ ] Fix container security issues
          - [ ] Address IaC security misconfigurations
          
          **Priority:** High
          **Due Date:** Within 24 hours
          `;
          
          // Only create issue if there are actual critical findings
          // This is a placeholder - real implementation would check scan results
          console.log('Would create security issue if critical findings exist');