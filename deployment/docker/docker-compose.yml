version: '3.8'

# WaveOps Enterprise Scaling Docker Compose Configuration
# Supports development, staging, and production environments

services:
  # Primary WaveOps Coordinator (Leader)
  waveops-leader:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile
    image: waveops:latest
    container_name: waveops-leader
    hostname: waveops-leader
    restart: unless-stopped
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - WAVEOPS_INSTANCE_ROLE=leader
      - WAVEOPS_INSTANCE_ID=leader-1
      - WAVEOPS_HA_ENABLED=true
      - WAVEOPS_LEADER_ELECTION_ENABLED=true
      - WAVEOPS_LEADER_ELECTION_LOCK_NAME=waveops-coordination-lock
      - WAVEOPS_LEADER_ELECTION_NAMESPACE=default
      - WAVEOPS_DATABASE_URL=${DATABASE_URL:-postgresql://postgres:password@postgres:5432/waveops}
      - WAVEOPS_REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - WAVEOPS_METRICS_ENABLED=true
      - WAVEOPS_TRACING_ENABLED=true
      - WAVEOPS_LOG_LEVEL=${LOG_LEVEL:-info}
      - WAVEOPS_PORT=3000
      - WAVEOPS_OBSERVABILITY_OTLP_ENDPOINT=${OTLP_ENDPOINT:-http://jaeger:14268/api/traces}
    ports:
      - "3000:3000"
      - "9090:9090"  # Metrics endpoint
    volumes:
      - waveops-config:/app/config
      - waveops-logs:/app/logs
    networks:
      - waveops-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Secondary WaveOps Coordinator (Follower)
  waveops-follower:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile
    image: waveops:latest
    restart: unless-stopped
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - WAVEOPS_INSTANCE_ROLE=follower
      - WAVEOPS_INSTANCE_ID=follower-${REPLICA_ID:-1}
      - WAVEOPS_HA_ENABLED=true
      - WAVEOPS_LEADER_ELECTION_ENABLED=true
      - WAVEOPS_LEADER_ELECTION_LOCK_NAME=waveops-coordination-lock
      - WAVEOPS_LEADER_ELECTION_NAMESPACE=default
      - WAVEOPS_DATABASE_URL=${DATABASE_URL:-postgresql://postgres:password@postgres:5432/waveops}
      - WAVEOPS_REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - WAVEOPS_METRICS_ENABLED=true
      - WAVEOPS_TRACING_ENABLED=true
      - WAVEOPS_LOG_LEVEL=${LOG_LEVEL:-info}
      - WAVEOPS_PORT=3000
      - WAVEOPS_OBSERVABILITY_OTLP_ENDPOINT=${OTLP_ENDPOINT:-http://jaeger:14268/api/traces}
    ports:
      - "3001-3003:3000"
    volumes:
      - waveops-config:/app/config
      - waveops-logs:/app/logs
    networks:
      - waveops-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      waveops-leader:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      replicas: ${WAVEOPS_REPLICAS:-2}
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # PostgreSQL Database with High Availability
  postgres:
    image: postgres:15-alpine
    container_name: waveops-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=waveops
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - waveops-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d waveops"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Caching and Session Management
  redis:
    image: redis:7-alpine
    container_name: waveops-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-password} --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    networks:
      - waveops-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # NGINX Load Balancer
  nginx:
    image: nginx:alpine
    container_name: waveops-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/ssl/certs:ro
      - waveops-logs:/var/log/nginx
    networks:
      - waveops-network
    depends_on:
      - waveops-leader
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: waveops-prometheus
    restart: unless-stopped
    ports:
      - "9091:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - waveops-network

  # Grafana for Metrics Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: waveops-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - waveops-network
    depends_on:
      - prometheus

  # Jaeger for Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: waveops-jaeger
    restart: unless-stopped
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - SPAN_STORAGE_TYPE=badger
      - BADGER_EPHEMERAL=false
      - BADGER_DIRECTORY_VALUE=/badger/data
      - BADGER_DIRECTORY_KEY=/badger/key
    volumes:
      - jaeger-data:/badger
    networks:
      - waveops-network

  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: waveops-otel-collector
    restart: unless-stopped
    command: ["--config=/etc/otel-collector-config.yml"]
    volumes:
      - ./otel/otel-collector-config.yml:/etc/otel-collector-config.yml:ro
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "8889:8889"   # Prometheus metrics endpoint
    networks:
      - waveops-network
    depends_on:
      - jaeger
      - prometheus

  # AlertManager for Alert Routing
  alertmanager:
    image: prom/alertmanager:latest
    container_name: waveops-alertmanager
    restart: unless-stopped
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager-data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    networks:
      - waveops-network

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  waveops-config:
    driver: local
  waveops-logs:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  jaeger-data:
    driver: local
  alertmanager-data:
    driver: local

networks:
  waveops-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16