apiVersion: v1
kind: Secret
metadata:
  name: waveops-secrets
  namespace: waveops
  labels:
    app.kubernetes.io/name: waveops
    app.kubernetes.io/component: secrets
    app.kubernetes.io/part-of: waveops
type: Opaque
stringData:
  # Database Configuration
  DATABASE_URL: "postgresql://postgres:password@postgres-service:5432/waveops"
  POSTGRES_USER: "postgres"
  POSTGRES_PASSWORD: "change-me-in-production"
  POSTGRES_DB: "waveops"
  
  # Redis Configuration
  REDIS_URL: "redis://redis-service:6379"
  REDIS_PASSWORD: "change-me-in-production"
  
  # GitHub API Tokens (for repository access)
  GITHUB_TOKEN: "ghp_change-me-in-production"
  GITHUB_WEBHOOK_SECRET: "change-me-in-production"
  
  # JWT Secrets
  JWT_SECRET: "change-me-in-production-with-strong-secret"
  JWT_REFRESH_SECRET: "change-me-in-production-with-different-secret"
  
  # Encryption Keys
  ENCRYPTION_KEY: "change-me-in-production-32-char-key"
  
  # External Service API Keys
  DATADOG_API_KEY: ""
  NEW_RELIC_LICENSE_KEY: ""
  SLACK_WEBHOOK_URL: ""
  PAGERDUTY_INTEGRATION_KEY: ""
  
  # TLS Certificates (base64 encoded)
  TLS_CERT: ""
  TLS_KEY: ""
  CA_CERT: ""

---
apiVersion: v1
kind: Secret
metadata:
  name: waveops-registry-secret
  namespace: waveops
  labels:
    app.kubernetes.io/name: waveops
    app.kubernetes.io/component: registry
type: kubernetes.io/dockerconfigjson
stringData:
  .dockerconfigjson: |
    {
      "auths": {
        "https://index.docker.io/v1/": {
          "username": "your-dockerhub-username",
          "password": "your-dockerhub-password",
          "email": "your-email@example.com",
          "auth": "base64-encoded-username:password"
        }
      }
    }

---
# ServiceAccount with RBAC for Leader Election
apiVersion: v1
kind: ServiceAccount
metadata:
  name: waveops-service-account
  namespace: waveops
  labels:
    app.kubernetes.io/name: waveops
    app.kubernetes.io/component: rbac
automountServiceAccountToken: true

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: waveops-leader-election-role
  namespace: waveops
  labels:
    app.kubernetes.io/name: waveops
    app.kubernetes.io/component: rbac
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["coordination.k8s.io"]
  resources: ["leases"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: waveops-leader-election-rolebinding
  namespace: waveops
  labels:
    app.kubernetes.io/name: waveops
    app.kubernetes.io/component: rbac
subjects:
- kind: ServiceAccount
  name: waveops-service-account
  namespace: waveops
roleRef:
  kind: Role
  name: waveops-leader-election-role
  apiGroup: rbac.authorization.k8s.io

---
# Cluster role for metrics and observability
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: waveops-metrics-reader
  labels:
    app.kubernetes.io/name: waveops
    app.kubernetes.io/component: rbac
rules:
- apiGroups: [""]
  resources: ["nodes", "pods", "services", "endpoints"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["metrics.k8s.io"]
  resources: ["nodes", "pods"]
  verbs: ["get", "list"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: waveops-metrics-reader-binding
  labels:
    app.kubernetes.io/name: waveops
    app.kubernetes.io/component: rbac
subjects:
- kind: ServiceAccount
  name: waveops-service-account
  namespace: waveops
roleRef:
  kind: ClusterRole
  name: waveops-metrics-reader
  apiGroup: rbac.authorization.k8s.io

---
# Network Policy for Security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: waveops-network-policy
  namespace: waveops
  labels:
    app.kubernetes.io/name: waveops
    app.kubernetes.io/component: security
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: waveops
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: waveops
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 3000
    - protocol: TCP
      port: 9090
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: waveops
    ports:
    - protocol: TCP
      port: 5432  # PostgreSQL
    - protocol: TCP
      port: 6379  # Redis
  - to: []
    ports:
    - protocol: TCP
      port: 443   # HTTPS
    - protocol: TCP
      port: 53    # DNS
    - protocol: UDP
      port: 53    # DNS