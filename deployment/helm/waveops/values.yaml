# WaveOps Enterprise Helm Chart Values
# This is a YAML-formatted file that declares the default values for the chart.

# Global configuration
global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""
  postgresql:
    auth:
      postgresPassword: ""
      database: "waveops"
  redis:
    auth:
      password: ""

# WaveOps application configuration
waveops:
  image:
    registry: docker.io
    repository: waveops/waveops
    tag: "1.0.0"
    pullPolicy: IfNotPresent
    pullSecrets: []

  # Deployment configuration
  replicaCount: 3
  
  # Revision history limit
  revisionHistoryLimit: 10
  
  # Strategy for deployment updates
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1

  # Pod configuration
  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
    prometheus.io/path: "/metrics"

  podLabels: {}

  podSecurityContext:
    runAsNonRoot: true
    runAsUser: 1001
    runAsGroup: 1001
    fsGroup: 1001

  securityContext:
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    capabilities:
      drop:
      - ALL

  # Service configuration
  service:
    type: LoadBalancer
    port: 80
    httpsPort: 443
    metricsPort: 9090
    annotations:
      service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
      service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    loadBalancerSourceRanges: []
    sessionAffinity: ClientIP
    sessionAffinityConfig:
      clientIP:
        timeoutSeconds: 300

  # Ingress configuration
  ingress:
    enabled: true
    className: "nginx"
    annotations:
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/rate-limit: "100"
      nginx.ingress.kubernetes.io/rate-limit-window: "1m"
      cert-manager.io/cluster-issuer: "letsencrypt-prod"
    hosts:
      - host: waveops.example.com
        paths:
          - path: /
            pathType: Prefix
    tls:
      - secretName: waveops-tls
        hosts:
          - waveops.example.com

  # Resource configuration
  resources:
    limits:
      cpu: 1000m
      memory: 2Gi
      ephemeral-storage: 2Gi
    requests:
      cpu: 250m
      memory: 512Mi
      ephemeral-storage: 1Gi

  # Auto-scaling configuration
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 20
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
    customMetrics:
      - name: waveops_coordination_latency_p99
        target:
          type: AverageValue
          averageValue: "2000"
    behavior:
      scaleUp:
        stabilizationWindowSeconds: 60
        selectPolicy: Max
        policies:
          - type: Pods
            value: 2
            periodSeconds: 60
          - type: Percent
            value: 50
            periodSeconds: 60
      scaleDown:
        stabilizationWindowSeconds: 300
        selectPolicy: Min
        policies:
          - type: Pods
            value: 1
            periodSeconds: 60
          - type: Percent
            value: 10
            periodSeconds: 60

  # Node selection
  nodeSelector: {}
  tolerations: []
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                    - waveops
            topologyKey: kubernetes.io/hostname

  # Health checks
  livenessProbe:
    httpGet:
      path: /health
      port: http
    initialDelaySeconds: 60
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 3

  readinessProbe:
    httpGet:
      path: /ready
      port: http
    initialDelaySeconds: 15
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3

  startupProbe:
    httpGet:
      path: /health
      port: http
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 10

  # Environment variables
  env: []
  envFrom: []

  # Volume mounts
  volumeMounts: []
  volumes: []

# Configuration
config:
  # Application settings
  app:
    logLevel: info
    nodeEnv: production
    port: 3000

  # High Availability
  highAvailability:
    enabled: true
    leaderElection:
      enabled: true
      lockName: "waveops-coordination-lock"
      leaseDurationSeconds: 15
      renewDeadlineSeconds: 10
      retryPeriodSeconds: 2

  # Multi-repository coordination
  multiRepository:
    enabled: true
    maxRepositories: 100
    synchronizationTimeout: 300000
    crossRepoCoordinationEnabled: true

  # Auto-scaling
  autoScaling:
    enabled: true
    targetConcurrentWaves: 50
    coordinationLatencyThreshold: 1000

  # Security
  security:
    authentication:
      jwt:
        enabled: true
        expirationTime: "24h"
      oauth:
        enabled: false
    authorization:
      rbac:
        enabled: true
    encryption:
      transit:
        enabled: true
        protocol: "TLS_1_3"
      rest:
        enabled: true
        algorithm: "AES_256"

# Secrets configuration
secrets:
  create: true
  annotations: {}
  
  # Database secrets
  database:
    url: ""
    username: "postgres"
    password: ""
    database: "waveops"
  
  # Redis secrets
  redis:
    url: ""
    password: ""
  
  # GitHub integration
  github:
    token: ""
    webhookSecret: ""
  
  # JWT secrets
  jwt:
    secret: ""
    refreshSecret: ""
  
  # Encryption
  encryption:
    key: ""

# Service Account configuration
serviceAccount:
  create: true
  annotations: {}
  name: ""
  automountServiceAccountToken: true

# RBAC configuration
rbac:
  create: true
  rules:
    - apiGroups: [""]
      resources: ["configmaps", "events"]
      verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
    - apiGroups: ["coordination.k8s.io"]
      resources: ["leases"]
      verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]

# Network Policy
networkPolicy:
  enabled: true
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: ingress-nginx
        - namespaceSelector:
            matchLabels:
              name: monitoring
      ports:
        - protocol: TCP
          port: 3000
        - protocol: TCP
          port: 9090
  egress:
    - to: []
      ports:
        - protocol: TCP
          port: 443  # HTTPS
        - protocol: TCP
          port: 53   # DNS
        - protocol: UDP
          port: 53   # DNS

# Pod Disruption Budget
podDisruptionBudget:
  enabled: true
  minAvailable: 1

# PostgreSQL dependency
postgresql:
  enabled: true
  auth:
    postgresPassword: "change-me-in-production"
    database: "waveops"
  architecture: replication
  primary:
    persistence:
      enabled: true
      size: 50Gi
  readReplicas:
    replicaCount: 2
    persistence:
      enabled: true
      size: 50Gi

# Redis dependency
redis:
  enabled: true
  auth:
    enabled: true
    password: "change-me-in-production"
  architecture: replication
  master:
    persistence:
      enabled: true
      size: 10Gi
  replica:
    replicaCount: 2
    persistence:
      enabled: true
      size: 10Gi

# Monitoring
monitoring:
  prometheus:
    enabled: true
    server:
      retention: "30d"
      persistentVolume:
        enabled: true
        size: 100Gi
    alertmanager:
      enabled: true
      persistentVolume:
        enabled: true
        size: 10Gi
    
  grafana:
    enabled: true
    persistence:
      enabled: true
      size: 10Gi
    adminPassword: "change-me-in-production"
    dashboards:
      default:
        waveops:
          url: https://raw.githubusercontent.com/waveops/waveops/main/monitoring/dashboards/waveops.json

# Tracing
tracing:
  jaeger:
    enabled: true
    collector:
      enabled: true
    query:
      enabled: true
      ingress:
        enabled: true
        hosts:
          - jaeger.waveops.example.com

# OpenTelemetry Collector
otelCollector:
  enabled: true
  mode: deployment
  config:
    receivers:
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
          http:
            endpoint: 0.0.0.0:4318
    processors:
      batch: {}
    exporters:
      prometheus:
        endpoint: "0.0.0.0:8889"
      jaeger:
        endpoint: jaeger-collector:14250
        tls:
          insecure: true
    service:
      pipelines:
        traces:
          receivers: [otlp]
          processors: [batch]
          exporters: [jaeger]
        metrics:
          receivers: [otlp]
          processors: [batch]
          exporters: [prometheus]

# Backup and Recovery
backup:
  enabled: false
  schedule: "0 2 * * *"  # Daily at 2 AM
  retention: "7d"
  storage:
    type: "s3"
    bucket: ""
    region: ""
    accessKeyId: ""
    secretAccessKey: ""

# Migration jobs
migration:
  enabled: true
  image:
    repository: waveops/migrations
    tag: "1.0.0"
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 256Mi

# Tests
tests:
  enabled: true
  image:
    repository: waveops/tests
    tag: "1.0.0"